<!-- Build FixedTreeAnalysis. It is also used by Hudson BEAST_II project. JUnit test is available for this build. -->
<project basedir="." default="build_jar_all_FixedTreeAnalysis" name="BUILD_FixedTreeAnalysis">
	<description>
	    Build FixedTreeAnalysis. 
            Also used by Hudson BEAST_II project. 
	    JUnit test is available for this build.
	    $Id: build_BEAST_II.xml $
	</description>

	<!-- set global properties for this build -->
	<property name="srclabs" location="../FixedTreeAnalysis/src" />
	<property name="build" location="../FixedTreeAnalysis/build" />
	<property name="liblabs" location="../FixedTreeAnalysis/lib" />
	<property name="release_dir" value="release" />
	<property name="dist" location="${build}/dist" />
	<property name="beast2path" location="../beast2" />
	<property name="srcBeast2" location="${beast2path}/src" />
	<property name="beast2classpath" location="${beast2path}/build" />
	<property name="package_dir" value="${release_dir}/add-on" />

    <import file="${beast2path}/build.xml" />


	<property name="main_class_BEAST" value="beast.app.BeastMCMC" />
	<property name="report" value="${build}/junitreport"/>

	<path id="classpath">
        <pathelement path="${build}"/>
		<fileset dir="${beast2path}/lib/junit" includes="junit-platform-console-standalone-1.8.2.jar"/>
		<fileset dir="${beast2path}/lib" includes="beagle.jar"/>
		<fileset dir="${beast2path}/lib" includes="fest.jar"/>
		<fileset dir="${beast2path}/lib" includes="colt.jar"/>
		<fileset dir="${beast2path}/lib" includes="antlr-runtime-4.10.1.jar"/>
		<fileset dir="${beast2path}/lib" includes="commons-math3-3.6.1.jar"/>
        <pathelement path="${beast2classpath}"/>
        <pathelement path="../BeastFX/build"/>
	</path>

	<!-- start -->
	<target name="initFixedTreeAnalysis">
		<echo message="${ant.project.name}: ${ant.file}" />
		
        <available file="./version.xml" property="versionAvailable"/>
        <fail unless="versionAvailable">
              ** Required file version.xml does not exist. **
        </fail>

        <!-- Read package name and version from xml file -->
        <xmlproperty file="./version.xml" prefix="fromVersionFile" />
        <property name="projName" value="${fromVersionFile.package(name)}" />
        <property name="projVersion" value="${fromVersionFile.package(version)}" />
        <property name="FixedTreeAnalysisVersion" value="${fromVersionFile.package(version)}" />
    </target>

	<target name="cleanFixedTreeAnalysis">
    	<delete dir="${build}" />
	</target>

	<!-- clean previous build, and then compile Java source code, and Juint test -->
	<target name="build_all_FixedTreeAnalysis" depends="cleanFixedTreeAnalysis,compile-allFixedTreeAnalysis,junitFixedTreeAnalysis"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- clean previous build, compile Java source code, and Junit test, and make the beast.jar and beauti.jar -->
	<target name="build_jar_all_FixedTreeAnalysis" depends="cleanFixedTreeAnalysis,compile-allFixedTreeAnalysis,junitFixedTreeAnalysis,dist_all_FixedTreeAnalysis"
        description="Clean and Build all run-time stuff">
	</target>


	<!-- No JUnit Test, clean previous build, compile Java source code, and make the FixedTreeAnalysis.jar and beauti.jar -->
	<target name="build_jar_all_FixedTreeAnalysis_NoJUnitTest" depends="cleanFixedTreeAnalysis,compile-allFixedTreeAnalysis,dist_all_FixedTreeAnalysis"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- compile Java source code -->
	<target name="compile-allFixedTreeAnalysis" depends="initFixedTreeAnalysis">


	    <!-- Capture the path as a delimited property using the refid attribute -->
	    <property name="myclasspath" refid="classpath"/>
	    <!-- Emit the property to the ant console -->
	    <echo message="Classpath = ${myclasspath}"/>

		<mkdir dir="${build}" />

		<!-- Compile the java code from ${srclabs} into ${build} /bin -->
		<javac srcdir="${srclabs}" destdir="${build}" classpathref="classpath" 
		       fork="true"
		       memoryinitialsize="256m"
		       memorymaximumsize="1024m"
		       >
			<include name="fixedtreeanalysis/**/**" />
			<!-- compile JUnit test classes -->
			<include name="fixedtreeanalysis/test/**" />
		</javac>
		<echo message="Successfully compiled." />
	</target>

	<!-- make the FixedTreeAnalysis.hjar and TreeAnnotator.jar -->
	<target name="dist_all_FixedTreeAnalysis" depends="compile-allFixedTreeAnalysis" description="create FixedTreeAnalysis jar">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}" />

		<jar jarfile="${dist}/FixedTreeAnalysis.src.jar">
			<fileset dir="${srclabs}">
				<include name="fixedtreeanalysis/**/*.java" />
				<include name="tefixedtreeanalysisst/**/*.java" />
				<include name="fixedtreeanalysis/**/*.png" />
				<include name="fixedtreeanalysis/**/*.xsl" />
			</fileset>
        </jar>
		<jar jarfile="${dist}/FixedTreeAnalysis.package.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
			<fileset dir="${build}">
				<include name="fixedtreeanalysis/**/*.class" />
			</fileset>
		</jar>
	</target>

	<!-- run beast.jar -->
	<target name="run_FixedTreeAnalysis">
		<java jar="${dist}/FixedTreeAnalysis.jar" fork="true" />
	</target>

	
	<!-- JUnit test -->
	<target name="junitFixedTreeAnalysis">
		<mkdir dir="${report}" />
		<junit printsummary="yes"> <!--showoutput='yes'-->
			<classpath>
				<path refid="classpath" />
				<path location="${build}" />
			</classpath>

			<formatter type="xml" />

			<batchtest fork="yes" todir="${report}">
				<fileset dir="${srclabs}">
                    <include name="test/**/*Test.java"/>
                    <exclude name="test/beast/integration/**/*Test.java"/>
				</fileset>
				<fileset dir="${srcBeast2}">
                    <include name="test/beast/integration/**/*Test.java"/>                                         
                    <exclude name="test/beast/integration/**/ResumeTest.java"/>                                         
                    <exclude name="test/beast/integration/**/ExampleXmlParsingTest.java"/>                                         
				</fileset>
			</batchtest>
		</junit>
		<echo message="JUnit test finished." />
	</target>
    
    <target name="junitreport">
		<junitreport todir="${report}">
			<fileset dir="${report}" includes="*.xml"/>
			<report format="frames" todir="${report}"/>
		</junitreport>
		<echo message="JUnit test report finished." />
	</target>

	<target name="addon" depends="package"/>
	
	<target name="package"
	        depends="build_jar_all_FixedTreeAnalysis_NoJUnitTest"
	        description="release BEAST 2 add-on version of FixedTreeAnalysis">
        <property name="fullName" value="${projName}.v${projVersion}"/>

		<delete dir="${package_dir}" />
		<!-- Create the release directory -->
		<mkdir dir="${package_dir}" />
		<mkdir dir="${package_dir}/lib" />
		<mkdir dir="${package_dir}/examples" />
		<mkdir dir="${package_dir}/fxtemplates" />

		<copy todir="${package_dir}">
			<fileset file="version.xml"/>
			<fileset file="LICENSE.txt"/>
		</copy>
		<copy todir="${package_dir}/examples">
			<fileset dir="examples" includes="*.xml">
			</fileset>
		</copy>

		<copy todir="${package_dir}/lib">
			<fileset  file="${dist}/FixedTreeAnalysis.package.jar" />
		</copy>
		<copy todir="${package_dir}">
			<fileset file="${dist}/FixedTreeAnalysis.src.jar" />
		</copy>
		<copy todir="${package_dir}/fxtemplates">
			<fileset file="fxtemplates/FixedTreeAnalysis.xml" />
			<fileset file="fxtemplates/TreeSetAnalysis.xml" />
		</copy>
		<jar jarfile="${dist}/${fullName}.zip">
			<fileset dir="${package_dir}">
				<include name="**/*" />
			</fileset>
        </jar>
		<echo message="Add-on version v${FixedTreeAnalysisVersion} release is finished." />
	</target>


 	<condition property="isWindows"><os family="windows" /></condition>
	<condition property="isLinux"><and><os family="unix"/><not><os family="mac"/></not></and></condition>
	<condition property="isMac"><os family="mac" /></condition>

	<target name="installLinux" depends="package" if="isLinux">
	        <mkdir dir="${user.home}/.beast/2.7/${projName}"/>
			<unzip src="${dist}/${fullName}.zip" dest="${user.home}/.beast/2.7/${projName}"/>
	</target>

	<target name="installMac" depends="package" if="isMac">
	        <mkdir dir="${user.home}/.beast/2.7/${projName}"/>
			<unzip src="${dist}/${fullName}.zip" dest="${user.home}/Library/Application Support/BEAST/2.7/${projName}"/>
	</target>

	<target name="installWindows" depends="package" if="isWindows">
	        <mkdir dir="${user.home}/BEAST/2.7/${projName}"/>
			<unzip src="${dist}/${fullName}.zip" dest="${user.home}/BEAST/2.7/${projName}"/>
	</target>

	<target name="install" depends="installWindows,installMac,installLinux">
	</target>
	


</project>
